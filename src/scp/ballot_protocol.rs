use std::{
    collections::BTreeMap,
    sync::{Arc, Mutex},
};

use super::{nomination_protocol::HNominationValue, scp::NodeID, slot::HSCPEnvelope, scp_driver::SlotDriver};

pub trait BallotProtocol {
    fn externalize(&mut self);
    fn recv_ballot_envelope(&mut self);
}

enum SCPhase {
    ScpPhasePrepare,
    ScpPhaseConfirm,
    ScpPhaseExternalize,
    ScpPhaseNum,
}

pub struct Ballot {}
pub type HBallot = Arc<Mutex<Ballot>>;

pub struct BallotProtocolState {
    heard_from_quorum: bool,

    current_ballot: HBallot,
    prepared: HBallot,
    prepared_prime: HBallot,
    high_ballot: HBallot,
    commit: HBallot,

    latest_envelopes: BTreeMap<NodeID, HSCPEnvelope>,
    phase: SCPhase,
    value_override: HNominationValue,

    current_message_level: usize,

    // last envelope generated by this node
    last_envelope: HSCPEnvelope,

    // last envelope emitted by this node
    last_envelope_emitted: HSCPEnvelope,
}

impl Default for Ballot {
    fn default() -> Self {
        Self {}
    }
}

impl Default for BallotProtocolState {
    fn default() -> Self {
        Self {
            heard_from_quorum: Default::default(),
            current_ballot: Default::default(),
            prepared: Default::default(),
            prepared_prime: Default::default(),
            high_ballot: Default::default(),
            commit: Default::default(),
            latest_envelopes: Default::default(),
            phase: SCPhase::ScpPhasePrepare,
            value_override: Default::default(),
            current_message_level: Default::default(),
            last_envelope: Default::default(),
            last_envelope_emitted: Default::default(),
        }
    }
}

impl BallotProtocol for BallotProtocolState {
    fn externalize(&mut self) {
        todo!()
    }

    fn recv_ballot_envelope(&mut self) {
        todo!()
    }
}

impl BallotProtocol for SlotDriver {
    fn externalize(&mut self) {
        todo!()
    }

    fn recv_ballot_envelope(&mut self) {
        todo!()
    }
}